version: '3.8'
services:
  postgres:
    image: postgres:15-alpine
    container_name: orm-nestjs-postgres
    restart: always
    environment:
      POSTGRES_HOST: ${DB_HOST:-localhost}
      POSTGRES_PORT: ${DB_PORT:-5432}
      POSTGRES_USER: ${DB_USERNAME:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-password}
      POSTGRES_DB: ${DB_NAME:-university_db}
      PGDATA: /var/lib/postgresql/data
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init/db.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
    networks:
      - nestjs-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  nestjs-app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: orm-nestjs-app
    restart: always
    environment:
      NODE_ENV: ${NODE_ENV}
      DB_HOST: postgres
      DB_PORT: ${DB_PORT}
      DB_USERNAME: ${DB_USERNAME}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
      PORT: ${PORT}
    ports: []
    networks:
      - nestjs-network
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  nginx:
    image: nginx:alpine
    container_name: orm-nestjs-nginx
    restart: always
    ports:
      - "3000:80"
      - "8443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./ssl:/etc/nginx/ssl:ro
    networks:
      - nestjs-network
    depends_on:
      - nestjs-app
    healthcheck:
      test: ["CMD-SHELL", "wget --quiet --tries=1 --spider http://localhost/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  adminer:
    image: adminer:latest
    container_name: orm-nestjs-adminer
    restart: always
    ports:
      - "8080:8080"
    networks:
      - nestjs-network
    depends_on:
      - postgres
    profiles:
      - admin

volumes:
  postgres_data:
    driver: local

networks:
  nestjs-network:
    driver: bridge